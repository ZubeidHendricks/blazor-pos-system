@using BlazorPOS.Shared.Models
@using BlazorPOS.Client.Services
@inject IProductService ProductService

<div class="product-grid-container">
    <div class="search-box">
        <input type="text" 
               @bind-value="searchTerm" 
               @bind-value:event="oninput"
               placeholder="Search products..." 
               class="form-control" />
    </div>

    <div class="category-filter">
        <select @bind="selectedCategory" class="form-control">
            <option value="">All Categories</option>
            @foreach (var category in categories)
            {
                <option value="@category">@category</option>
            }
        </select>
    </div>

    <div class="product-grid">
        @if (filteredProducts != null)
        {
            foreach (var product in filteredProducts)
            {
                <div class="product-card" @onclick="() => OnProductSelected.InvokeAsync(product)">
                    <div class="product-info">
                        <h4>@product.Name</h4>
                        <p class="price">@product.Price.ToString("C2")</p>
                        <p class="stock @(product.Stock <= 5 ? "low-stock" : "")">Stock: @product.Stock</p>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="loading-products">
                <span class="spinner"></span>
                <p>Loading products...</p>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<Product> OnProductSelected { get; set; }

    private List<Product> products;
    private string searchTerm = "";
    private string selectedCategory = "";
    private List<string> categories = new();

    private IEnumerable<Product> filteredProducts =>
        products?.Where(p =>
            (string.IsNullOrEmpty(searchTerm) ||
             p.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(selectedCategory) ||
             p.Category == selectedCategory)
        );

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        products = await ProductService.GetProductsAsync();
        if (products != null)
        {
            categories = products
                .Select(p => p.Category)
                .Distinct()
                .OrderBy(c => c)
                .ToList();
        }
    }
}
@using BlazorPOS.Shared.Models

<div class="container-fluid p-4">
    <div class="row mb-4">
        <div class="col">
            <div class="input-group">
                <input 
                    type="text" 
                    class="form-control" 
                    placeholder="Search products..." 
                    @bind-value="searchTerm" 
                    @bind-value:event="oninput"
                    @onkeyup="HandleSearch" />
                <button class="btn btn-primary" @onclick="HandleSearch">
                    <i class="fas fa-search"></i> Search
                </button>
            </div>
        </div>
    </div>

    <div class="row g-4">
        @foreach (var product in filteredProducts)
        {
            <div class="col-md-3">
                <div class="card h-100 product-card" @onclick="() => OnProductSelected(product)">
                    <div class="card-body">
                        <h5 class="card-title">@product.Name</h5>
                        <p class="card-text">@product.Description</p>
                        <div class="d-flex justify-content-between align-items-center">
                            <span class="price">$@product.Price.ToString("F2")</span>
                            <span class="stock @(product.StockQuantity > 0 ? "text-success" : "text-danger")">
                                Stock: @product.StockQuantity
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<style>
    .product-card {
        cursor: pointer;
        transition: all 0.2s ease-in-out;
    }

    .product-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }

    .price {
        font-size: 1.2rem;
        font-weight: bold;
        color: #2c3e50;
    }
</style>

@code {
    private string searchTerm = "";
    private List<Product> products = new();
    private List<Product> filteredProducts => string.IsNullOrWhiteSpace(searchTerm) 
        ? products 
        : products.Where(p => 
            p.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) || 
            p.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
          ).ToList();

    [Parameter]
    public EventCallback<Product> OnProductClicked { get; set; }

    protected override void OnInitialized()
    {
        // Test data
        products = new List<Product>
        {
            new Product 
            { 
                Id = 1, 
                Name = "Coffee", 
                Description = "Fresh brewed coffee",
                Price = 2.99m,
                StockQuantity = 100
            },
            new Product 
            { 
                Id = 2, 
                Name = "Croissant", 
                Description = "Freshly baked croissant",
                Price = 3.49m,
                StockQuantity = 25
            },
            new Product 
            { 
                Id = 3, 
                Name = "Sandwich", 
                Description = "Classic club sandwich",
                Price = 6.99m,
                StockQuantity = 15
            },
            new Product 
            { 
                Id = 4, 
                Name = "Salad", 
                Description = "Garden fresh salad",
                Price = 5.99m,
                StockQuantity = 20
            }
        };
    }

    private async Task HandleSearch()
    {
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnProductSelected(Product product)
    {
        if (OnProductClicked.HasDelegate)
        {
            await OnProductClicked.InvokeAsync(product);
        }
    }
}